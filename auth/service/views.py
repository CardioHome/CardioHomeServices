# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from connector import dispatch
import remote_data

from .models import *


# Create your views here.
@dispatch
def get_user(user_id):
    """
    Retrieves user information from the given user_id if available in the Stakeholder table. 
    
    :param user_id: id number of the user to be retrieved from the database
    :return: if successful, returns str(user_id), otherwise return error message 
    """

    try:
        user = Stakeholder.objects.all().filter(pk=user_id)[0]
    except LookupError:
        user = "User with user id: " + user_id + " does not exist."
    return user
    # all() -> SELECT * FROM stakeholder;
    # all().filter(nick_name = 'a') -> SELECT * FROM stakeholder WHERE nick_name = 'a';


@dispatch
def add_user_to_home(user_id, target_user_id, home_id):
    """
    Adds the target_user_id within the home_id specified in the Stakeholder table by user with user_id.
    
    :param user_id: user that adds the target_user_id to home_id
    :param target_user_id: user (typically a patient) to be added into the home specified by home_id
    :param home_id: home within the Stakeholder table
    :return: if successful, nothing, otherwise error message
    """

    try:
        user = Stakeholder.objects.all().filter(pk=user_id)[0]
    except LookupError:
        return "Unable to find user with id: " + user_id
    try:
        home = user.home.objects.all().filter(pk=home_id)[0]
    except LookupError:
        return "Unable to find home with id: " + home_id
    try:
        home.pk = Stakeholder.objects.all().filter(pk=target_user_id)[0].pk
        #TODO: Call the cache module to make this change
        home.save()
    except LookupError:
        return "Unable to find user to add with id: " + target_user_id


@dispatch
def create_home(map_data):
    """
    Creates an entry with map_data in the Home table.
    
    :param map_data: dictionary containing all key-value attributes of a Home object
    :return: Home object
    """

    home = Home(**map_data)

    #TODO: placeholder, need cache module to handle this???
    home.save()

    return home


@dispatch
def edit_user(user_id, data):
    """
    Makes changes to the user specified by user_id with data.
    
    :param user_id: id in the Stakeholder table
    :param data: data containing information about the user
    :return: 
    """

    try:
        user = Stakeholder.objects.all().filter(pk=user_id)[0]
        user.update(**data)
    except LookupError:
        return "Unable to find user with id: " + user_id
    return user


@dispatch
def signup(username, password, reg_key, data={}):
    """
    Creates a new user in the Stakeholder table with the username, password, reg_key and data.
    
    :param username: 
    :param password: 
    :param reg_key: 
    :param data: 
    :return: 
    """

    user = Stakeholder(username=username, password=password, reg_key=reg_key)

    #TODO: For cache module
    user.save();

    return user


@dispatch
def login(username, password):
    """
    Login user with username and password into the system.
    
    :param username: 
    :param password: 
    :return: user from Stakeholder table with the corresponding user name 
    """

    try:
        user = Stakeholder.objects.all().filter(usrename=username, password=password)[0]
    except LookupError:
        return "Username and/or password is incorrect."

    return user

@dispatch
def generate_reg_key(role, org=None):
    """
    Generates a key for new users signing up to the CardioHome service.
    
    :param role: role (int) of the user in the system (i.e. Patient, Doctor, Family member)
    :param org: organization the user belongs to
    :return: a key generated by using the role and organization
    """
    organization = Organization(name=org, org_type=org)
    hash_key = abs(hash(str(role) + str(org)))
    reg_key = RegisterKey(role=role, organization=org, key=hash_key)

    #TODO: Call cache module
    reg_key.save()

    return reg_key


@dispatch
def get_reg_key(key):
    """
    Retrieves the reg_key from the RegisterKey table specified by the given key.
    
    :param key: 
    :return: 
    """

    pass